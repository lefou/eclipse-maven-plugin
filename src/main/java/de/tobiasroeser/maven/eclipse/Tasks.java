package de.tobiasroeser.maven.eclipse;

import static de.tototec.utils.functional.FList.flatten;
import static de.tototec.utils.functional.FList.foreach;
import static de.tototec.utils.functional.FList.map;
import static de.tototec.utils.functional.FList.mkString;

import java.io.File;
import java.io.PrintStream;
import java.net.URI;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import de.tototec.utils.functional.Optional;

/**
 * Various worker methods to generate Eclipse project files.
 */
public class Tasks {

	private final File basedir;

	public Tasks(final File basedir) {
		this.basedir = basedir;
	}

	public void generateProjectFile(
			final PrintStream printStream,
			final ProjectConfig projectConfig) {
		printStream.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		printStream.println("<!-- Generated by eclipse-maven-plugin -->");
		printStream.println("<projectDescription>");
		printStream.println("\t<name>" + projectConfig.getName() + "</name>");
		printStream.println("\t<comment>" + projectConfig.getComment() + "</comment>");

		printStream.println("\t<projects>");
		printStream.println("\t</projects>");

		printStream.println("\t<buildSpec>");
		foreach(projectConfig.getBuilders(), b -> {
			printStream.println("\t\t<buildCommand>");
			printStream.println("\t\t\t<name>" + b.getName() + "</name>");
			printStream.println("\t\t\t<arguments>");
			printStream.println("\t\t\t</arguments>");
			printStream.println("\t\t</buildCommand>");
		});
		printStream.println("\t</buildSpec>");

		printStream.println("\t<natures>");
		foreach(projectConfig.getNatures(), n -> {
			printStream.println("\t\t<nature>" + n.getName() + "</nature>");
		});
		printStream.println("\t</natures>");

		printStream.println("</projectDescription>");
	}

	public String relativePath(final String file) {
		final String relPath;
		if (new File(file).isAbsolute()) {
			final URI basePath = basedir.toURI();
			relPath = basePath.relativize(new File(file).toURI()).getPath();
		} else {
			relPath = file;
		}
		if (relPath.length() > 1 && relPath.endsWith("/")) {
			return relPath.substring(0, relPath.length() - 1);
		} else {
			return relPath;
		}
	}

	public Optional<String> whenUndefined(final Optional<?> predicate, final String useWhenDefined) {
		if (predicate.isDefined())
			return Optional.none();
		else
			return Optional.some(useWhenDefined);
	}

	public void generateClasspathFileContent(final PrintStream printStream, final ProjectConfig projectConfig,
			final Optional<String> buildOutput, final String outputDirectory, final String testOutputDirectory,
			final boolean sourcesOptional) {

		printStream.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
		printStream.println("<!-- Generated by eclipse-maven-plugin -->");
		printStream.println("<classpath>");

		// src
		foreach(projectConfig.getSources(),
				s -> generateClasspathEntry(printStream, "src", s,
						whenUndefined(buildOutput, outputDirectory),
						sourcesOptional));
		foreach(projectConfig.getResources(),
				s -> generateClasspathEntry(printStream, "src", s.getPath(),
						whenUndefined(buildOutput, outputDirectory),
						sourcesOptional, s.getIncludes(), s.getExcludes()));
		foreach(projectConfig.getTestSources(),
				s -> generateClasspathEntry(printStream, "src", s,
						whenUndefined(buildOutput, testOutputDirectory),
						sourcesOptional));
		foreach(projectConfig.getTestResources(),
				s -> generateClasspathEntry(printStream, "src", s.getPath(),
						whenUndefined(buildOutput, testOutputDirectory),
						sourcesOptional, s.getIncludes(), s.getExcludes()));

		// con
		projectConfig.getJavaVersion().foreach(javaVersion -> {
			final String jrePrefix = "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/";
			final String jreSuffix;
			if ("1.5".equals(javaVersion) || "1.4".equals(javaVersion)) {
				jreSuffix = "J2SE-" + javaVersion;
			} else {
				jreSuffix = "JavaSE-" + javaVersion;
			}

			generateClasspathEntry(printStream, "con", jrePrefix + jreSuffix, Optional.none(), false);
		});

		generateClasspathEntry(printStream, "con", "org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER", Optional.none(),
				false);

		// output
		printStream.println("\t<classpathentry kind=\"output\" path=\""
				+ buildOutput.getOrElse(relativePath(outputDirectory)) + "\"/>");

		printStream.println("</classpath>");
	}

	protected void generateClasspathEntry(
			final PrintStream printStream,
			final String kind,
			final String path,
			final Optional<String> outputPath,
			final boolean optional) {
		generateClasspathEntry(printStream, kind, path, outputPath, optional,
				Collections.emptyList(), Collections.emptyList());
	}

	protected void generateClasspathEntry(
			final PrintStream printStream,
			final String kind,
			final String path,
			final Optional<String> outputPath,
			final boolean optional,
			final List<String> includes,
			final List<String> excludes) {

		String normalizedPath;
		if ("src".equals(kind)) {
			normalizedPath = relativePath(path);
		} else {
			normalizedPath = path;
		}

		printStream.print("\t<classpathentry kind=\"" + kind + "\" path=\"" + normalizedPath + "\"");
		if (!includes.isEmpty()) {
			printStream.print(" including=\"");
			printStream.print(mkString(includes, "|"));
			printStream.print("\"");
		}
		if (!excludes.isEmpty()) {
			printStream.print(" excluding=\"");
			printStream.print(mkString(excludes, "|"));
			printStream.print("\"");
		}
		outputPath.foreach(p -> printStream.print(" output=\"" + relativePath(p) + "\""));
		printStream.println(">");
		printStream.println("\t\t<attributes>");
		if (optional) {
			printStream.println("\t\t\t<attribute name=\"optional\" value=\"true\"/>");
		}
		printStream.println("\t\t\t<attribute name=\"maven.pomderived\" value=\"true\"/>");
		printStream.println("\t\t</attributes>");
		printStream.println("\t</classpathentry>");
	}

	public void generateSettingOrgEclipseJdtCorePrefs(final PrintStream printStream,
			final Optional<String> javaVersion) {
		printStream.println("eclipse.preferences.version=1");
		javaVersion.foreach(v -> {
			printStream.println("org.eclipse.jdt.core.compiler.codegen.targetPlatform=" + v);
			printStream.println("org.eclipse.jdt.core.compiler.compliance=" + v);
			printStream.println("org.eclipse.jdt.core.compiler.source=" + v);
		});
	}

	public void generateSettingOrgEclipseM2eCorePrefs(final PrintStream printStream,
			final List<String> activeProfiles) {
		printStream.println("activeProfiles=" + mkString(activeProfiles, ","));
		printStream.println("eclipse.preferences.version=1");
		printStream.println("resolveWorkspaceProjects=true");
		printStream.println("version=1");
	}

	public void generateSettingOrgEclipseCoreResourcesPrefs(final PrintStream printStream,
			final ProjectConfig projectConfig) {
		printStream.println("eclipse.preferences.version=1");
		projectConfig.getEncoding().foreach(encoding -> {
			foreach(flatten(Arrays.asList(
					projectConfig.getSources(),
					map(projectConfig.getResources(), r -> r.getPath()),
					projectConfig.getTestSources(),
					map(projectConfig.getTestResources(), r -> r.getPath()))),
					path -> printStream.println("encoding//" + relativePath(path) + "=" + encoding));
			printStream.println("encoding/<project>=" + encoding);
		});
	}

}
